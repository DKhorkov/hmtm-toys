// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/masters_service.go -exclude_interfaces=TagsService,CategoriesService,ToysService,SsoService -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-toys/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockMastersService is a mock of MastersService interface.
type MockMastersService struct {
	ctrl     *gomock.Controller
	recorder *MockMastersServiceMockRecorder
	isgomock struct{}
}

// MockMastersServiceMockRecorder is the mock recorder for MockMastersService.
type MockMastersServiceMockRecorder struct {
	mock *MockMastersService
}

// NewMockMastersService creates a new mock instance.
func NewMockMastersService(ctrl *gomock.Controller) *MockMastersService {
	mock := &MockMastersService{ctrl: ctrl}
	mock.recorder = &MockMastersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMastersService) EXPECT() *MockMastersServiceMockRecorder {
	return m.recorder
}

// GetAllMasters mocks base method.
func (m *MockMastersService) GetAllMasters(ctx context.Context) ([]entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMasters", ctx)
	ret0, _ := ret[0].([]entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMasters indicates an expected call of GetAllMasters.
func (mr *MockMastersServiceMockRecorder) GetAllMasters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMasters", reflect.TypeOf((*MockMastersService)(nil).GetAllMasters), ctx)
}

// GetMasterByID mocks base method.
func (m *MockMastersService) GetMasterByID(ctx context.Context, id uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByID", ctx, id)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByID indicates an expected call of GetMasterByID.
func (mr *MockMastersServiceMockRecorder) GetMasterByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByID", reflect.TypeOf((*MockMastersService)(nil).GetMasterByID), ctx, id)
}

// GetMasterByUserID mocks base method.
func (m *MockMastersService) GetMasterByUserID(ctx context.Context, userID uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByUserID", ctx, userID)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByUserID indicates an expected call of GetMasterByUserID.
func (mr *MockMastersServiceMockRecorder) GetMasterByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByUserID", reflect.TypeOf((*MockMastersService)(nil).GetMasterByUserID), ctx, userID)
}

// RegisterMaster mocks base method.
func (m *MockMastersService) RegisterMaster(ctx context.Context, masterData entities.RegisterMasterDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMaster", ctx, masterData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMaster indicates an expected call of RegisterMaster.
func (mr *MockMastersServiceMockRecorder) RegisterMaster(ctx, masterData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMaster", reflect.TypeOf((*MockMastersService)(nil).RegisterMaster), ctx, masterData)
}

// UpdateMaster mocks base method.
func (m *MockMastersService) UpdateMaster(ctx context.Context, masterData entities.UpdateMasterDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaster", ctx, masterData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMaster indicates an expected call of UpdateMaster.
func (mr *MockMastersServiceMockRecorder) UpdateMaster(ctx, masterData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaster", reflect.TypeOf((*MockMastersService)(nil).UpdateMaster), ctx, masterData)
}
