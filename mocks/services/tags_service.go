// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/tags_service.go -exclude_interfaces=MastersService,CategoriesService,ToysService,SsoService -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-toys/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTagsService is a mock of TagsService interface.
type MockTagsService struct {
	ctrl     *gomock.Controller
	recorder *MockTagsServiceMockRecorder
	isgomock struct{}
}

// MockTagsServiceMockRecorder is the mock recorder for MockTagsService.
type MockTagsServiceMockRecorder struct {
	mock *MockTagsService
}

// NewMockTagsService creates a new mock instance.
func NewMockTagsService(ctrl *gomock.Controller) *MockTagsService {
	mock := &MockTagsService{ctrl: ctrl}
	mock.recorder = &MockTagsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagsService) EXPECT() *MockTagsServiceMockRecorder {
	return m.recorder
}

// CreateTags mocks base method.
func (m *MockTagsService) CreateTags(ctx context.Context, tagsData []entities.CreateTagDTO) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", ctx, tagsData)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockTagsServiceMockRecorder) CreateTags(ctx, tagsData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockTagsService)(nil).CreateTags), ctx, tagsData)
}

// GetAllTags mocks base method.
func (m *MockTagsService) GetAllTags(ctx context.Context) ([]entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", ctx)
	ret0, _ := ret[0].([]entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockTagsServiceMockRecorder) GetAllTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagsService)(nil).GetAllTags), ctx)
}

// GetTagByID mocks base method.
func (m *MockTagsService) GetTagByID(ctx context.Context, id uint32) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByID", ctx, id)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByID indicates an expected call of GetTagByID.
func (mr *MockTagsServiceMockRecorder) GetTagByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByID", reflect.TypeOf((*MockTagsService)(nil).GetTagByID), ctx, id)
}
