// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/sso_service.go -exclude_interfaces=TagsService,MastersService,ToysService,CategoriesService -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-toys/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockSsoService is a mock of SsoService interface.
type MockSsoService struct {
	ctrl     *gomock.Controller
	recorder *MockSsoServiceMockRecorder
	isgomock struct{}
}

// MockSsoServiceMockRecorder is the mock recorder for MockSsoService.
type MockSsoServiceMockRecorder struct {
	mock *MockSsoService
}

// NewMockSsoService creates a new mock instance.
func NewMockSsoService(ctrl *gomock.Controller) *MockSsoService {
	mock := &MockSsoService{ctrl: ctrl}
	mock.recorder = &MockSsoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSsoService) EXPECT() *MockSsoServiceMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockSsoService) GetAllUsers(ctx context.Context) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockSsoServiceMockRecorder) GetAllUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockSsoService)(nil).GetAllUsers), ctx)
}

// GetUserByEmail mocks base method.
func (m *MockSsoService) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockSsoServiceMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockSsoService)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockSsoService) GetUserByID(ctx context.Context, id uint64) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockSsoServiceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockSsoService)(nil).GetUserByID), ctx, id)
}
