// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/masters_repository.go -exclude_interfaces=TagsRepository,CategoriesRepository,ToysRepository,SsoRepository -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-toys/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockMastersRepository is a mock of MastersRepository interface.
type MockMastersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMastersRepositoryMockRecorder
	isgomock struct{}
}

// MockMastersRepositoryMockRecorder is the mock recorder for MockMastersRepository.
type MockMastersRepositoryMockRecorder struct {
	mock *MockMastersRepository
}

// NewMockMastersRepository creates a new mock instance.
func NewMockMastersRepository(ctrl *gomock.Controller) *MockMastersRepository {
	mock := &MockMastersRepository{ctrl: ctrl}
	mock.recorder = &MockMastersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMastersRepository) EXPECT() *MockMastersRepositoryMockRecorder {
	return m.recorder
}

// CountMasters mocks base method.
func (m *MockMastersRepository) CountMasters(ctx context.Context, filters *entities.MastersFilters) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMasters", ctx, filters)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMasters indicates an expected call of CountMasters.
func (mr *MockMastersRepositoryMockRecorder) CountMasters(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMasters", reflect.TypeOf((*MockMastersRepository)(nil).CountMasters), ctx, filters)
}

// GetMasterByID mocks base method.
func (m *MockMastersRepository) GetMasterByID(ctx context.Context, id uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByID", ctx, id)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByID indicates an expected call of GetMasterByID.
func (mr *MockMastersRepositoryMockRecorder) GetMasterByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByID", reflect.TypeOf((*MockMastersRepository)(nil).GetMasterByID), ctx, id)
}

// GetMasterByUserID mocks base method.
func (m *MockMastersRepository) GetMasterByUserID(ctx context.Context, userID uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByUserID", ctx, userID)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByUserID indicates an expected call of GetMasterByUserID.
func (mr *MockMastersRepositoryMockRecorder) GetMasterByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByUserID", reflect.TypeOf((*MockMastersRepository)(nil).GetMasterByUserID), ctx, userID)
}

// GetMasters mocks base method.
func (m *MockMastersRepository) GetMasters(ctx context.Context, pagination *entities.Pagination, filters *entities.MastersFilters) ([]entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasters", ctx, pagination, filters)
	ret0, _ := ret[0].([]entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasters indicates an expected call of GetMasters.
func (mr *MockMastersRepositoryMockRecorder) GetMasters(ctx, pagination, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasters", reflect.TypeOf((*MockMastersRepository)(nil).GetMasters), ctx, pagination, filters)
}

// RegisterMaster mocks base method.
func (m *MockMastersRepository) RegisterMaster(ctx context.Context, masterData entities.RegisterMasterDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMaster", ctx, masterData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMaster indicates an expected call of RegisterMaster.
func (mr *MockMastersRepositoryMockRecorder) RegisterMaster(ctx, masterData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMaster", reflect.TypeOf((*MockMastersRepository)(nil).RegisterMaster), ctx, masterData)
}

// UpdateMaster mocks base method.
func (m *MockMastersRepository) UpdateMaster(ctx context.Context, masterData entities.UpdateMasterDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaster", ctx, masterData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMaster indicates an expected call of UpdateMaster.
func (mr *MockMastersRepositoryMockRecorder) UpdateMaster(ctx, masterData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaster", reflect.TypeOf((*MockMastersRepository)(nil).UpdateMaster), ctx, masterData)
}
