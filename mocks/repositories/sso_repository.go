// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/sso_repository.go -exclude_interfaces=MastersRepository,CategoriesRepository,ToysRepository,TagsRepository -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-toys/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockSsoRepository is a mock of SsoRepository interface.
type MockSsoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSsoRepositoryMockRecorder
	isgomock struct{}
}

// MockSsoRepositoryMockRecorder is the mock recorder for MockSsoRepository.
type MockSsoRepositoryMockRecorder struct {
	mock *MockSsoRepository
}

// NewMockSsoRepository creates a new mock instance.
func NewMockSsoRepository(ctrl *gomock.Controller) *MockSsoRepository {
	mock := &MockSsoRepository{ctrl: ctrl}
	mock.recorder = &MockSsoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSsoRepository) EXPECT() *MockSsoRepositoryMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockSsoRepository) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockSsoRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockSsoRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockSsoRepository) GetUserByID(ctx context.Context, id uint64) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockSsoRepositoryMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockSsoRepository)(nil).GetUserByID), ctx, id)
}
