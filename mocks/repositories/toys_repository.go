// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/toys_repository.go -exclude_interfaces=MastersRepository,CategoriesRepository,TagsRepository -package=mockrepositories
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-toys/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockToysRepository is a mock of ToysRepository interface.
type MockToysRepository struct {
	ctrl     *gomock.Controller
	recorder *MockToysRepositoryMockRecorder
	isgomock struct{}
}

// MockToysRepositoryMockRecorder is the mock recorder for MockToysRepository.
type MockToysRepositoryMockRecorder struct {
	mock *MockToysRepository
}

// NewMockToysRepository creates a new mock instance.
func NewMockToysRepository(ctrl *gomock.Controller) *MockToysRepository {
	mock := &MockToysRepository{ctrl: ctrl}
	mock.recorder = &MockToysRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToysRepository) EXPECT() *MockToysRepositoryMockRecorder {
	return m.recorder
}

// AddToy mocks base method.
func (m *MockToysRepository) AddToy(toyData entities.AddToyDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToy", toyData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToy indicates an expected call of AddToy.
func (mr *MockToysRepositoryMockRecorder) AddToy(toyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToy", reflect.TypeOf((*MockToysRepository)(nil).AddToy), toyData)
}

// GetAllToys mocks base method.
func (m *MockToysRepository) GetAllToys() ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllToys")
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllToys indicates an expected call of GetAllToys.
func (mr *MockToysRepositoryMockRecorder) GetAllToys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllToys", reflect.TypeOf((*MockToysRepository)(nil).GetAllToys))
}

// GetMasterToys mocks base method.
func (m *MockToysRepository) GetMasterToys(masterID uint64) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterToys", masterID)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterToys indicates an expected call of GetMasterToys.
func (mr *MockToysRepositoryMockRecorder) GetMasterToys(masterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterToys", reflect.TypeOf((*MockToysRepository)(nil).GetMasterToys), masterID)
}

// GetToyByID mocks base method.
func (m *MockToysRepository) GetToyByID(id uint64) (*entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToyByID", id)
	ret0, _ := ret[0].(*entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToyByID indicates an expected call of GetToyByID.
func (mr *MockToysRepositoryMockRecorder) GetToyByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToyByID", reflect.TypeOf((*MockToysRepository)(nil).GetToyByID), id)
}
