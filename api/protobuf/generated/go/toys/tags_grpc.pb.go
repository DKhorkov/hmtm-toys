// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package toys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagsServiceClient is the client API for TagsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagsServiceClient interface {
	CreateTags(ctx context.Context, in *CreateTagsIn, opts ...grpc.CallOption) (*CreateTagsOut, error)
	GetTag(ctx context.Context, in *GetTagIn, opts ...grpc.CallOption) (*GetTagOut, error)
	GetTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTagsOut, error)
}

type tagsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagsServiceClient(cc grpc.ClientConnInterface) TagsServiceClient {
	return &tagsServiceClient{cc}
}

func (c *tagsServiceClient) CreateTags(ctx context.Context, in *CreateTagsIn, opts ...grpc.CallOption) (*CreateTagsOut, error) {
	out := new(CreateTagsOut)
	err := c.cc.Invoke(ctx, "/tags.TagsService/CreateTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) GetTag(ctx context.Context, in *GetTagIn, opts ...grpc.CallOption) (*GetTagOut, error) {
	out := new(GetTagOut)
	err := c.cc.Invoke(ctx, "/tags.TagsService/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) GetTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTagsOut, error) {
	out := new(GetTagsOut)
	err := c.cc.Invoke(ctx, "/tags.TagsService/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagsServiceServer is the server API for TagsService service.
// All implementations must embed UnimplementedTagsServiceServer
// for forward compatibility
type TagsServiceServer interface {
	CreateTags(context.Context, *CreateTagsIn) (*CreateTagsOut, error)
	GetTag(context.Context, *GetTagIn) (*GetTagOut, error)
	GetTags(context.Context, *emptypb.Empty) (*GetTagsOut, error)
	mustEmbedUnimplementedTagsServiceServer()
}

// UnimplementedTagsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagsServiceServer struct {
}

func (UnimplementedTagsServiceServer) CreateTags(context.Context, *CreateTagsIn) (*CreateTagsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTags not implemented")
}
func (UnimplementedTagsServiceServer) GetTag(context.Context, *GetTagIn) (*GetTagOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedTagsServiceServer) GetTags(context.Context, *emptypb.Empty) (*GetTagsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedTagsServiceServer) mustEmbedUnimplementedTagsServiceServer() {}

// UnsafeTagsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagsServiceServer will
// result in compilation errors.
type UnsafeTagsServiceServer interface {
	mustEmbedUnimplementedTagsServiceServer()
}

func RegisterTagsServiceServer(s grpc.ServiceRegistrar, srv TagsServiceServer) {
	s.RegisterService(&TagsService_ServiceDesc, srv)
}

func _TagsService_CreateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).CreateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tags.TagsService/CreateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).CreateTags(ctx, req.(*CreateTagsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tags.TagsService/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).GetTag(ctx, req.(*GetTagIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tags.TagsService/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).GetTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TagsService_ServiceDesc is the grpc.ServiceDesc for TagsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tags.TagsService",
	HandlerType: (*TagsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTags",
			Handler:    _TagsService_CreateTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _TagsService_GetTag_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _TagsService_GetTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toys/tags.proto",
}
