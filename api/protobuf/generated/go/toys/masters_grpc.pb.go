// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package toys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MastersServiceClient is the client API for MastersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MastersServiceClient interface {
	RegisterMaster(ctx context.Context, in *RegisterMasterRequest, opts ...grpc.CallOption) (*RegisterMasterResponse, error)
	GetMaster(ctx context.Context, in *GetMasterRequest, opts ...grpc.CallOption) (*GetMasterResponse, error)
	GetMasters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMastersResponse, error)
}

type mastersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMastersServiceClient(cc grpc.ClientConnInterface) MastersServiceClient {
	return &mastersServiceClient{cc}
}

func (c *mastersServiceClient) RegisterMaster(ctx context.Context, in *RegisterMasterRequest, opts ...grpc.CallOption) (*RegisterMasterResponse, error) {
	out := new(RegisterMasterResponse)
	err := c.cc.Invoke(ctx, "/masters.MastersService/RegisterMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastersServiceClient) GetMaster(ctx context.Context, in *GetMasterRequest, opts ...grpc.CallOption) (*GetMasterResponse, error) {
	out := new(GetMasterResponse)
	err := c.cc.Invoke(ctx, "/masters.MastersService/GetMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastersServiceClient) GetMasters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMastersResponse, error) {
	out := new(GetMastersResponse)
	err := c.cc.Invoke(ctx, "/masters.MastersService/GetMasters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MastersServiceServer is the server API for MastersService service.
// All implementations must embed UnimplementedMastersServiceServer
// for forward compatibility
type MastersServiceServer interface {
	RegisterMaster(context.Context, *RegisterMasterRequest) (*RegisterMasterResponse, error)
	GetMaster(context.Context, *GetMasterRequest) (*GetMasterResponse, error)
	GetMasters(context.Context, *emptypb.Empty) (*GetMastersResponse, error)
	mustEmbedUnimplementedMastersServiceServer()
}

// UnimplementedMastersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMastersServiceServer struct {
}

func (UnimplementedMastersServiceServer) RegisterMaster(context.Context, *RegisterMasterRequest) (*RegisterMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMaster not implemented")
}
func (UnimplementedMastersServiceServer) GetMaster(context.Context, *GetMasterRequest) (*GetMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaster not implemented")
}
func (UnimplementedMastersServiceServer) GetMasters(context.Context, *emptypb.Empty) (*GetMastersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasters not implemented")
}
func (UnimplementedMastersServiceServer) mustEmbedUnimplementedMastersServiceServer() {}

// UnsafeMastersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MastersServiceServer will
// result in compilation errors.
type UnsafeMastersServiceServer interface {
	mustEmbedUnimplementedMastersServiceServer()
}

func RegisterMastersServiceServer(s grpc.ServiceRegistrar, srv MastersServiceServer) {
	s.RegisterService(&MastersService_ServiceDesc, srv)
}

func _MastersService_RegisterMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastersServiceServer).RegisterMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masters.MastersService/RegisterMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastersServiceServer).RegisterMaster(ctx, req.(*RegisterMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastersService_GetMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastersServiceServer).GetMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masters.MastersService/GetMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastersServiceServer).GetMaster(ctx, req.(*GetMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastersService_GetMasters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastersServiceServer).GetMasters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masters.MastersService/GetMasters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastersServiceServer).GetMasters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MastersService_ServiceDesc is the grpc.ServiceDesc for MastersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MastersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "masters.MastersService",
	HandlerType: (*MastersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMaster",
			Handler:    _MastersService_RegisterMaster_Handler,
		},
		{
			MethodName: "GetMaster",
			Handler:    _MastersService_GetMaster_Handler,
		},
		{
			MethodName: "GetMasters",
			Handler:    _MastersService_GetMasters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toys/masters.proto",
}
