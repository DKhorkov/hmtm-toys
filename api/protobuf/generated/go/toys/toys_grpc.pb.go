// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package toys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToysServiceClient is the client API for ToysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToysServiceClient interface {
	AddToy(ctx context.Context, in *AddToyRequest, opts ...grpc.CallOption) (*AddToyResponse, error)
	GetToy(ctx context.Context, in *GetToyRequest, opts ...grpc.CallOption) (*GetToyResponse, error)
	GetToys(ctx context.Context, in *GetToysRequest, opts ...grpc.CallOption) (*GetToysResponse, error)
	GetMasterToys(ctx context.Context, in *GetMasterToysRequest, opts ...grpc.CallOption) (*GetToysResponse, error)
}

type toysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToysServiceClient(cc grpc.ClientConnInterface) ToysServiceClient {
	return &toysServiceClient{cc}
}

func (c *toysServiceClient) AddToy(ctx context.Context, in *AddToyRequest, opts ...grpc.CallOption) (*AddToyResponse, error) {
	out := new(AddToyResponse)
	err := c.cc.Invoke(ctx, "/toys.ToysService/AddToy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toysServiceClient) GetToy(ctx context.Context, in *GetToyRequest, opts ...grpc.CallOption) (*GetToyResponse, error) {
	out := new(GetToyResponse)
	err := c.cc.Invoke(ctx, "/toys.ToysService/GetToy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toysServiceClient) GetToys(ctx context.Context, in *GetToysRequest, opts ...grpc.CallOption) (*GetToysResponse, error) {
	out := new(GetToysResponse)
	err := c.cc.Invoke(ctx, "/toys.ToysService/GetToys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toysServiceClient) GetMasterToys(ctx context.Context, in *GetMasterToysRequest, opts ...grpc.CallOption) (*GetToysResponse, error) {
	out := new(GetToysResponse)
	err := c.cc.Invoke(ctx, "/toys.ToysService/GetMasterToys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToysServiceServer is the server API for ToysService service.
// All implementations must embed UnimplementedToysServiceServer
// for forward compatibility
type ToysServiceServer interface {
	AddToy(context.Context, *AddToyRequest) (*AddToyResponse, error)
	GetToy(context.Context, *GetToyRequest) (*GetToyResponse, error)
	GetToys(context.Context, *GetToysRequest) (*GetToysResponse, error)
	GetMasterToys(context.Context, *GetMasterToysRequest) (*GetToysResponse, error)
	mustEmbedUnimplementedToysServiceServer()
}

// UnimplementedToysServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToysServiceServer struct {
}

func (UnimplementedToysServiceServer) AddToy(context.Context, *AddToyRequest) (*AddToyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToy not implemented")
}
func (UnimplementedToysServiceServer) GetToy(context.Context, *GetToyRequest) (*GetToyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToy not implemented")
}
func (UnimplementedToysServiceServer) GetToys(context.Context, *GetToysRequest) (*GetToysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToys not implemented")
}
func (UnimplementedToysServiceServer) GetMasterToys(context.Context, *GetMasterToysRequest) (*GetToysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterToys not implemented")
}
func (UnimplementedToysServiceServer) mustEmbedUnimplementedToysServiceServer() {}

// UnsafeToysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToysServiceServer will
// result in compilation errors.
type UnsafeToysServiceServer interface {
	mustEmbedUnimplementedToysServiceServer()
}

func RegisterToysServiceServer(s grpc.ServiceRegistrar, srv ToysServiceServer) {
	s.RegisterService(&ToysService_ServiceDesc, srv)
}

func _ToysService_AddToy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToysServiceServer).AddToy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toys.ToysService/AddToy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToysServiceServer).AddToy(ctx, req.(*AddToyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToysService_GetToy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToysServiceServer).GetToy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toys.ToysService/GetToy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToysServiceServer).GetToy(ctx, req.(*GetToyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToysService_GetToys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToysServiceServer).GetToys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toys.ToysService/GetToys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToysServiceServer).GetToys(ctx, req.(*GetToysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToysService_GetMasterToys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterToysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToysServiceServer).GetMasterToys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toys.ToysService/GetMasterToys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToysServiceServer).GetMasterToys(ctx, req.(*GetMasterToysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToysService_ServiceDesc is the grpc.ServiceDesc for ToysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toys.ToysService",
	HandlerType: (*ToysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToy",
			Handler:    _ToysService_AddToy_Handler,
		},
		{
			MethodName: "GetToy",
			Handler:    _ToysService_GetToy_Handler,
		},
		{
			MethodName: "GetToys",
			Handler:    _ToysService_GetToys_Handler,
		},
		{
			MethodName: "GetMasterToys",
			Handler:    _ToysService_GetMasterToys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toys/toys.proto",
}
