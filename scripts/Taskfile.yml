version: '3'

tasks:
  docker_prod:
    desc: "Docker build and run."
    aliases:
      - prod
    cmds:
      - task: create_logs_folder
      - task: copy_env_file_for_docker
      - task: docker_build
      - task: docker_run

  create_postgres_folders:
    desc: "Create postgres folders for other tasks purposes."
    internal: true
    dir: ../
    cmds:
      - mkdir -p postgres_data
      - mkdir -p postgres_backups

  create_logs_folder:
    desc: "Create logs folder for docker volume purposes."
    internal: true
    dir: ../
    cmds:
      - mkdir -p logs

  copy_env_file_for_docker:
    desc: "Copy .env file to docker folder to paste environments from file in docker compose file."
    internal: true
    dir: ../
    cmd: cp .env build/package/.env

  docker_build:
    desc: "Build docker container."
    aliases:
      - build
    cmd: sudo docker compose -f ../build/package/docker-compose.yml build

  docker_run:
    desc: "Launch docker container."
    aliases:
      - run
    cmd: sudo docker compose -f ../build/package/docker-compose.yml up

  docker_stop:
    desc: "Stop all docker containers."
    aliases:
      - stop
    cmd:  sudo docker stop $(sudo docker ps -a -q)

  docker_clean:
    desc: "Clean docker containers, images and volumes."
    cmd: sudo docker system prune -a --volumes

  clean_up:
    desc: "Clean up all folders, docker volumes, images and containers."
    dir: ../
    aliases:
      - clean
    cmds:
      - sudo rm -rf logs/
      - sudo rm -rf coverage/
      - sudo rm -rf build/package/.env
      - sudo rm -rf postgres_data/
      - sudo rm -rf postgres_backups/
      - task: docker_clean

  setup_proto:
    desc: "Install all go-proto requirements."
    aliases:
      - setup
    cmds:
      - sudo snap install protobuf --classic
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - export PATH="$PATH:$(go env GOPATH)/bin"
      - task: create_protobuf_folders

  create_protobuf_folders:
    desc: "Create folders structure for protobuf usage."
    internal: true
    dir: ../
    cmds:
      - mkdir -p api/protobuf/protofiles
      - mkdir -p api/protobuf/generated/go

  grpc_generate:
    desc: "Generate code from .proto files."
    aliases:
      - gen
      - generate
      - grpc
    dir: ../
    cmds:
      - protoc --proto_path=api/protobuf/protofiles ./api/protobuf/protofiles/toys/masters.proto --go_out=./api/protobuf/generated/go --go_opt=paths=source_relative --go-grpc_out=./api/protobuf/generated/go --go-grpc_opt=paths=source_relative
      - protoc --proto_path=api/protobuf/protofiles ./api/protobuf/protofiles/toys/categories.proto --go_out=./api/protobuf/generated/go --go_opt=paths=source_relative --go-grpc_out=./api/protobuf/generated/go --go-grpc_opt=paths=source_relative
      - protoc --proto_path=api/protobuf/protofiles ./api/protobuf/protofiles/toys/tags.proto --go_out=./api/protobuf/generated/go --go_opt=paths=source_relative --go-grpc_out=./api/protobuf/generated/go --go-grpc_opt=paths=source_relative
      - protoc --proto_path=api/protobuf/protofiles ./api/protobuf/protofiles/toys/toys.proto --go_out=./api/protobuf/generated/go --go_opt=paths=source_relative --go-grpc_out=./api/protobuf/generated/go --go-grpc_opt=paths=source_relative

  tests:
    desc: "Run tests and save coverage to ./tests/coverage folder."
    aliases:
      - test
    dir: ../
    cmds:
      - task: create_postgres_folders
      - sudo chmod -R 777 postgres_data
      - sudo chmod -R 777 postgres_backups
      - mkdir -p ./coverage
      - go test -v -shuffle=on -coverprofile ./coverage/coverage.out -coverpkg=./... ./...
      - go tool cover -html ./coverage/coverage.out -o ./coverage/coverage.html

  benchmarks:
    desc: "Run benchmarks."
    aliases:
      - bench
    dir: ../
    cmd: go test -v ./... -bench=. -run=xxx -benchmem >> bench.txt

  linters:
    desc: "Run linters."
    aliases:
      - lint
    dir: ../
    cmds:
      - task: create_postgres_folders
      - sudo chmod -R 777 postgres_data
      - sudo chmod -R 777 postgres_backups
      - golangci-lint run -v --fix

  makemigrations:
    desc: "Create migration file with provided name."
    requires: # Make sure these variables are set before running
      vars: [ NAME ]
    vars:
      DIR: ./migrations
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} create {{.NAME}} sql

  migrate:
    desc: "Apply all available migrations."
    aliases:
      - create_database
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$HMTM_TOYS_DB_OUTER_HOST:$HMTM_TOYS_DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} up

  migrate_to:
    desc: "Migrate up to a specific version."
    requires:
      vars: [ VERSION ]
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$HMTM_TOYS_DB_OUTER_HOST:$HMTM_TOYS_DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} up-to {{.VERSION}}

  downgrade_to:
    desc: "Rollback migrations to a specific version."
    requires:
      vars: [ VERSION ]
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$HMTM_TOYS_DB_OUTER_HOST:$HMTM_TOYS_DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} down-to {{.VERSION}}

  downgrade_to_base:
    desc: "Rollback all migrations (careful!)."
    aliases:
      - drop_tables
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$HMTM_TOYS_DB_OUTER_HOST:$HMTM_TOYS_DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} down-to 0

  migrations_status:
    desc: "Print status of all migrations."
    aliases:
      - status
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$HMTM_TOYS_DB_OUTER_HOST:$HMTM_TOYS_DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} status

  upload_docker_image:
    desc: "Uploads docker image to dockerhub."
    aliases:
      - upload
    dir: ../
    cmds:
      - task: copy_env_file_for_docker
      - task: docker_build
      - sudo docker tag hmtm_toys d3m0s/hmtm_toys
      - sudo docker push d3m0s/hmtm_toys
